{"version":3,"sources":["components/Menu/index.tsx","pages/Home/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Menu","props","React","useEffect","$navbarBurgers","Array","prototype","slice","call","document","querySelectorAll","length","forEach","el","addEventListener","target","dataset","$target","getElementById","classList","toggle","removeEventListener","className","role","aria-label","src","aria-expanded","data-target","aria-hidden","id","links","map","key","name","to","Home","About","AppRouter","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uQAae,SAASA,EAAKC,GAuB3B,OAtBAC,IAAMC,UAAU,WACd,IAAMC,EAAiBC,MAAMC,UAAUC,MAAMC,KAC3CC,SAASC,iBAAiB,kBAC1B,GAgBF,OAbIN,EAAeO,OAAS,GAC1BP,EAAeQ,QAAQ,SAAAC,GACrBA,EAAGC,iBAAiB,QAAS,WAC3B,IAAMC,EAASF,EAAGG,QAAQD,OACpBE,EAAUR,SAASS,eAAeH,GACpCE,IACFJ,EAAGM,UAAUC,OAAO,aACpBH,EAAQE,UAAUC,OAAO,kBAM1B,kBAAMX,SAASY,oBAAoB,mBAAoB,iBAI9D,oCACE,yBACEC,UAAU,+CACVC,KAAK,aACLC,aAAW,mBAEX,yBAAKF,UAAU,gBACb,6BACE,yBAAKG,IAAI,2GACT,uBAAGH,UAAU,oCAAb,aAEF,uBACEC,KAAK,SACLD,UAAU,4CACVE,aAAW,OACXE,gBAAc,QACdC,cAAY,WAEZ,0BAAMC,cAAY,SAClB,0BAAMA,cAAY,SAClB,0BAAMA,cAAY,WAItB,yBAAKC,GAAG,UAAUP,UAAU,mCAC1B,yBAAKA,UAAU,gBACZrB,EAAM6B,MAAMC,IAAI,SAAAlB,GAAE,OACjB,kBAAC,IAAD,CAAMmB,IAAKnB,EAAGoB,KAAMX,UAAU,cAAcY,GAAIrB,EAAGqB,IAChDrB,EAAGoB,WAMd,yBACEX,UAAU,4CACVC,KAAK,aACLC,aAAW,mBAEX,yBAAKC,IAAI,2GACT,uBAAGH,UAAU,wBAAb,iBACA,uBAAGA,UAAU,6BAAb,QACA,wBAAIA,UAAU,aACXrB,EAAM6B,MAAMC,IAAI,SAAAlB,GAAE,OACjB,wBAAImB,IAAKnB,EAAGoB,MACV,kBAAC,IAAD,CAAMC,GAAIrB,EAAGqB,IAAKrB,EAAGoB,Y,MC9EpB,SAASE,IACtB,OAAO,8BCCT,SAASC,IACP,OAAO,qCAoCMC,MAjCf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKf,UAAU,eACb,kBAACtB,EAAD,CACE8B,MAAO,CACL,CACEG,KAAM,OACNC,GAAI,KAEN,CACED,KAAM,QACNC,GAAI,WAEN,CACED,KAAM,SACNC,GAAI,WAEN,CACED,KAAM,eACNC,GAAI,cAIV,yBAAKZ,UAAU,aACb,kBAAC,IAAD,CAAOgB,KAAK,IAAIC,OAAK,EAACC,UAAWL,IACjC,kBAAC,IAAD,CAAOG,KAAK,UAAUE,UAAWJ,QCxBvBK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAAStC,SAASS,eAAe,SDiI3C,kBAAmB8B,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.f8a40bfc.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./styles.css\";\n\nimport { Link, match } from \"react-router-dom\";\n\ntype MenuProps = {\n  match?: match;\n  links: {\n    name: string;\n    to: string;\n  }[];\n};\n\nexport default function Menu(props: MenuProps) {\n  React.useEffect(() => {\n    const $navbarBurgers = Array.prototype.slice.call(\n      document.querySelectorAll(\".navbar-burger\"),\n      0\n    );\n\n    if ($navbarBurgers.length > 0) {\n      $navbarBurgers.forEach(el => {\n        el.addEventListener(\"click\", () => {\n          const target = el.dataset.target;\n          const $target = document.getElementById(target);\n          if ($target) {\n            el.classList.toggle(\"is-active\");\n            $target.classList.toggle(\"is-active\");\n          }\n        });\n      });\n    }\n\n    return () => document.removeEventListener(\"DOMContentLoaded\", () => {});\n  });\n\n  return (\n    <>\n      <nav\n        className=\"navbar is-hidden-tablet  has-background-dark\"\n        role=\"navigation\"\n        aria-label=\"main navigation\"\n      >\n        <div className=\"navbar-brand\">\n          <div>\n            <img src=\"https://avatars1.githubusercontent.com/u/40393115?s=400&u=6d01731a394e08c6d8390a5fce9cf3091ee91eb2&v=4\" />\n            <p className=\"navbar-item title has-text-white\">Marcos S</p>\n          </div>\n          <a\n            role=\"button\"\n            className=\"navbar-burger burger has-background-white\"\n            aria-label=\"menu\"\n            aria-expanded=\"false\"\n            data-target=\"menuNav\"\n          >\n            <span aria-hidden=\"true\" />\n            <span aria-hidden=\"true\" />\n            <span aria-hidden=\"true\" />\n          </a>\n        </div>\n\n        <div id=\"menuNav\" className=\"navbar-menu has-background-dark\">\n          <div className=\"navbar-start\">\n            {props.links.map(el => (\n              <Link key={el.name} className=\"navbar-item\" to={el.to}>\n                {el.name}\n              </Link>\n            ))}\n          </div>\n        </div>\n      </nav>\n      <nav\n        className=\"menu has-background-dark is-hidden-mobile\"\n        role=\"navigation\"\n        aria-label=\"main navigation\"\n      >\n        <img src=\"https://avatars1.githubusercontent.com/u/40393115?s=400&u=6d01731a394e08c6d8390a5fce9cf3091ee91eb2&v=4\" />\n        <p className=\"title has-text-white\">Marcos Sarges</p>\n        <p className=\"menu-label has-text-white\">Menu</p>\n        <ul className=\"menu-list\">\n          {props.links.map(el => (\n            <li key={el.name}>\n              <Link to={el.to}>{el.name}</Link>\n            </li>\n          ))}\n        </ul>\n      </nav>\n    </>\n  );\n}\n","import React from \"react\";\n\n// import { Container } from './styles';\n\nexport default function Home() {\n  return <div />;\n}\n","import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Menu from \"./components/Menu\";\nimport \"./App.css\";\nimport Home from \"./pages/Home\";\n\nfunction About() {\n  return <h2>About</h2>;\n}\n\nfunction AppRouter() {\n  return (\n    <Router>\n      <div className=\"main ajuste\">\n        <Menu\n          links={[\n            {\n              name: \"Home\",\n              to: \"/\"\n            },\n            {\n              name: \"Sobre\",\n              to: \"/about/\"\n            },\n            {\n              name: \"Github\",\n              to: \"/about/\"\n            },\n            {\n              name: \"Certificados\",\n              to: \"/about/\"\n            }\n          ]}\n        />\n        <div className=\"container\">\n          <Route path=\"/\" exact component={Home} />\n          <Route path=\"/about/\" component={About} />\n        </div>\n      </div>\n    </Router>\n  );\n}\n\nexport default AppRouter;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"normalize.css\";\nimport \"bulma\";\nimport App from \"./App\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nserviceWorker.unregister();\n"],"sourceRoot":""}